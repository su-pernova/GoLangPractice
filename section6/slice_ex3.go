package main

import "fmt"

func main() {
	// 슬라이스 값 복사(참조복사가 아닌)를 할 수 있다.
	// copy 함수 사용 : copy(복사대상, 원본)
	// make 함수로 먼저 공간을 할당해야 복사가 가능하다.
	// 복사했기 때문에, 복제된 슬라이스에 변경을 가해도 원본 슬라이스에는 영향이 없다.

	// copy 함수 사용 예제(1) : 길이 할당에 주의하라
	slice1 := []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}
	slice2 := make([]int, 5)
	slice3 := []int{}

	copy(slice2, slice1) // 길이가 5 이기 때문에 slice1의 원소 5개만 복사된다.
	copy(slice3, slice1) // 길이가 0 이기 떄문에 slice1의 원소가 하나도 복사되지 않는다.

	fmt.Println(slice2)
	fmt.Println(slice3, "\n")

	// copy 함수 사용 예제(2) : 복제 슬라이스에 가해진 수정은 원본 슬라이스에 영향을 주지 않는다.
	a := []int{1, 2, 3, 4, 5}
	b := make([]int, 5)

	copy(b, a)

	b[0] = 7
	b[4] = 10

	fmt.Println(a)
	fmt.Println(b, "\n")

	// 슬라이스 추출은 복제가 아닌 참조 복사이다.
	// 즉 복제본에 가해진 수정이 원본에 영향을 가할 수 있다. !주의!
	c := [5]int{1, 2, 3, 4, 5}
	d := c[0:3]

	d[1] = 7 // d 는 c 의 추출본이다. 하지만 참조 복사이므로 d 에 가해지는 수정이 c 의 내용에도 영향을 준다.

	fmt.Println(c)
	fmt.Println(d, "\n")

	// 추출시 세번째 인수를 사용할 수 있다.
	// 세번째 인수는 용량 지정을 의미한다.
	e := []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}
	f := e[0:5:7] // e의 인덱스 0~4 의 값을 추출하되, 해당 추출본의 용량을 7로 하라. 물론 이 역시 참조 복사이다.

	fmt.Println(len(f), cap(f), f)

}
