package main

import "fmt"

func main() {
	// Go 에서 배열을 활용할 수 있다.
	// 배열은 용량, 길이가 항상 같다.
	// 유의점 : 배열과 슬라이스의 차이를 잘 이해해야 한다.
	// 	< 배열 >
	//	- 길이가 고정이다. 처음 선언한 길이를 변경할 수 없다.
	//	- 값 타입 자료형이다. 값 전달 시 내용 자체의 복사가 발생한다.
	//	- 값 타입이므로 비교연산자 사용이 가능하다.
	//	< 슬라이스 >
	//	- 길이가 고정되어 있지 않다. 크기를 늘리거나 줄일 수 있다.
	//	- 참조 타입 자료형이다. 값 전달 시 내용 자체의 복사가 아닌, 주소값의 복사가 발생한다.
	//	- 값 타입이 아니므로 비교연산자 사용이 불가능하다.
	//	- 가변성 때문에 대부분의 경우 슬라이스를 사용한다. 배열은 거의 사용하지 않는다.
	// cap() : 배열 또는 슬라이스의 전체 크기(용량) 반환
	// len() : 배열 또는 슬라이스 원소의 개수 반환

	// 중괄호 안에 들어가는 원소의 개수와 자료형은 선언한 내용과 동일해야 한다.
	var arr1 [5]int
	var arr2 [5]int = [5]int{1, 2, 3, 4, 5}
	arr1[1] = 5
	var arr3 = [5]int{1, 2, 3, 4, 5}
	arr4 := [5]int{1, 2, 3, 4, 5}
	arr5 := [5]int{1, 2, 3}         // 직접 초기화하지 않은 부분은 0으로 자동 초기화된다.
	arr6 := [...]int{1, 2, 3, 4, 5} // 배열 크기 자동 맞춤. 그러나 가독성을 해치기 때문에 지양하는 것이 좋다.
	arr7 := [5][5]int{
		{1, 2, 3, 4, 5},
		{6, 7, 8, 9, 10}, // 끝나는 지점에도 반드시 콤마를 찍어줘야 한다.
	}

	fmt.Printf("", arr1)
	fmt.Println()
	fmt.Printf("%-5T / %d / %v\n", arr1, len(arr1), arr1) // 배열은 %v 포맷으로 출력할 수 있다. (%v : value 포맷. 순수한 값을 출력한다)
	fmt.Printf("%-5T / %d / %v\n", arr2, len(arr2), arr2) // %-5T 포맷을 이용해 간단한 배열 정보를 출력할 수 있다.
	fmt.Printf("%-5T / %d / %v\n", arr3, len(arr3), arr3)
	fmt.Printf("%-5T / %d / %v\n", arr4, len(arr4), arr4)
	fmt.Printf("%-5T / %d / %v\n", arr5, len(arr5), arr5)
	fmt.Printf("%-5T / %d / %v\n", arr6, len(arr6), arr6)
	fmt.Printf("%-5T / %d / %v\n", arr7, len(arr7), arr7)

}
